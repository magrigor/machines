[user]
    username = Maxim Agrigoroae
    signingkey = 09223BE4CED4AC8370975BAE39705F5D53438518
    name = magrigor
    email = maxim.agrigoroae@endava.com
[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
[core]
    longpaths = true
    autocrlf = false
[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # View the current working tree status using the short format
    s = status -s
    # Show the diff between the latest commit and the current state
    d = "!git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # View global config
    ec = config --global -e
    # Push branch upstream
    pushup = "!gitbranchname() { git symbolic-ref --short HEAD; }; gitpushupstream() { git push --set-upstream origin `gitbranchname`; }; gitpushupstream"
    # Forcepush current branch
    forcepush = "!gitbranchname() { git symbolic-ref --short HEAD; }; gitforcepush() { git push -f origin `gitbranchname`; }; gitforcepush"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = "!d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    p = "!git pull; git submodule foreach git pull origin master"
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes
    ca = !git add -A && git commit -av
    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch
    mpr = "!f() { \t\tdeclare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \t\tdeclare branch=\"${2:-$currentBranch}\"; \t\tif [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \t\t\tgit fetch origin refs/pull/$1/head:pr/$1 && \t\t\tgit checkout -B $branch && \t\t\tgit rebase $branch pr/$1 && \t\t\tgit checkout -B $branch && \t\t\tgit merge pr/$1 && \t\t\tgit branch -D pr/$1 && \t\t\tgit commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \t\tfi \t}; f"
